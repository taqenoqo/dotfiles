# Âü∫Êú¨„ÉÑ„Éº„É´

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
    let g:comfortable_motion_scroll_down_key = "j"
    let g:comfortable_motion_scroll_up_key = "k"
    nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
    nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
    let g:comfortable_motion_friction = 0.0
    let g:comfortable_motion_air_drag = 4.0
'''

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    xmap <Leader>a <Plug>(LiveEasyAlign)
    nmap <Leader>a <Plug>(LiveEasyAlign)
'''

[[plugins]]
repo = 'vim-scripts/open-browser.vim'
hook_add = '''
    nmap <Leader>b <Plug>(openbrowser-smart-search)
    vmap <Leader>b <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'vim-scripts/surround.vim'
hook_add = '''
    let g:surround_no_mappings = 1

    nmap ds <Plug>Dsurround
    nmap cs <Plug>Csurround
    nmap s <Plug>Ysurround
    xmap s <Plug>VSurround
'''

[[plugins]]
repo = 'gyim/vim-boxdraw'
hook_add = '''
    nnoremap <Leader>d :call ToggleFlag('virtualedit', 'all')<CR>
    function! ToggleFlag(option,flag)
        exec ('let lopt = &' . a:option)
        if lopt =~ (".*" . a:flag . ".*")
            exec ('set ' . a:option . '-=' . a:flag)
        else
            exec ('set ' . a:option . '+=' . a:flag)
        endif
    endfunction
    vnoremap ab :<C-u>call boxdraw#Select("ao")<CR>
    vnoremap ib :<C-u>call boxdraw#Select("io")<CR>
'''

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
    omap <silent> ic <Plug>CamelCaseMotion_ie
    vmap <silent> ic <Plug>CamelCaseMotion_ie
    omap <silent> ac <Plug>CamelCaseMotion_iw
    vmap <silent> ac <Plug>CamelCaseMotion_iw
'''

[[plugins]]
repo = 'folti/ShowMarks'
hook_add = '''
    let g:showmarks_textlower = " "
    let g:showmarks_textupper = " "
    let g:showmarks_textother = " "
    let g:showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

    hi ShowMarksHLl ctermbg=153 ctermfg=69 cterm=BOLD
    hi ShowMarksHLu ctermbg=224 ctermfg=210 cterm=BOLD
    hi ShowMarksHLo ctermbg=231 ctermfg=250
    hi ShowMarksHLm ctermbg=228 ctermfg=208 cterm=BOLD,UNDERLINE
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap <Leader>gc :Git commit<CR>
    nmap <Leader>gs :Git<CR>
    nmap <Leader>gd :Git diff<CR>
    nmap <Leader>gl :Git log --paginate<CR>
    nmap <Leader>ga :Git add<CR>
    nmap <Leader>gb :Git blame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    let g:gitgutter_sign_priority = 5
    nmap ]h <Plug>GitGutterNextHunk
    nmap [h <Plug>GitGutterPrevHunk
'''


[[plugins]]
repo = 'joom/latex-unicoder.vim'
hook_add = '''
    let g:unicoder_cancel_normal = 1
    let g:unicoder_cancel_insert = 1
    let g:unicoder_cancel_visual = 1
    let g:unicoder_no_map = 1
    inoremap <C-u> <Esc>:call unicoder#start(1)<CR>
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
hook_add = '''
    nnoremap <Leader>G<Enter> :Gtags <C-r><C-w><CR>
    nnoremap <Leader>Gr :Gtags -r <C-r><C-w><CR>
    nnoremap <Leader>Gl :Gtags -f %<CR>
    nnoremap <Leader>Gi :Gtags<CR>
    nnoremap <Leader>Gn :cn<CR>
    nnoremap <Leader>Gp :cp<CR>
'''

[[plugins]]
repo = 'zebult/auto-gtags.vim'
hook_add = '''
    nnoremap <Leader>Gg :GtagsCreate<CR>
    let g:auto_gtags = 1
'''

[[plugins]]
repo = 'taqenoqo/vim-indent-guides'
rev = 'right-align'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_right_align = 1
    let g:indent_guides_default_mapping = 0

    hi IndentGuidesOdd  ctermbg=194 ctermfg=145
    hi IndentGuidesEven ctermbg=194 ctermfg=145
'''

## IDE Âåñ„Éó„É©„Ç∞„Ç§„É≥

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
    let g:coc_global_extensions = [
        \ 'coc-json', 
        \ 'coc-git',
        \ 'coc-vimlsp',
        \ 'coc-emoji',
        \ 'coc-yaml',
        \ 'coc-diagnostic',
        \ 'coc-lists',
        \ 'coc-spell-checker',
        \ 'coc-java',
        \ '@yaegassy/coc-marksman'
        \ ]

    let g:coc_config_home = "~/.vim/coc/"
    let g:coc_data_home = "~/.vimcache/coc/"

    hi link CocErrorSign Error
    hi link CocWarningSign Warning
    hi link CocInfoSign Info
    hi link CocHintSign Info
    hi link CocErrorHighlight CocErrorSign
    hi link CocWarningHighlight CocWarningSign
    hi link CocInfoHighlight CocInfoSign
    hi link CocHintHighlight CocHintSign
    hi link CocMenuSel PmenuSel
    hi link CocFloating Pmenu
    hi link CocFloatThumb PmenuThumb
    hi link CocFloatSbar PmenuSbar

    inoremap <silent><expr> <C-n> 
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ coc#refresh()
    inoremap <silent><expr> <C-p> 
        \ coc#pum#visible() ? coc#pum#prev(1) :
        \ coc#refresh()
    inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
    function! CheckBackspace() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    if has('nvim')
        inoremap <silent><expr> <c-space> coc#refresh()
    else
        inoremap <silent><expr> <c-@> coc#refresh()
    endif

    if has('nvim-0.4.0') || has('patch-8.2.0750')
        nnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1, 1) : "\<C-j>"
        nnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0, 1) : "\<C-k>"
        inoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1, 1)\<cr>" : "\<C-j>"
        inoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0, 1)\<cr>" : "\<C-k>"
        vnoremap <silent><nowait><expr> <C-j> coc#float#has_scroll() ? coc#float#scroll(1, 1) : "\<C-j>"
        vnoremap <silent><nowait><expr> <C-k> coc#float#has_scroll() ? coc#float#scroll(0, 1) : "\<C-k>"
    endif

    nnoremap <silent> K :call ShowDocumentation()<CR>
    function! ShowDocumentation()
        if CocAction('hasProvider', 'hover')
            call CocActionAsync('doHover')
        else
            call feedkeys('K', 'in')
        endif
    endfunction

    function! ShowHover()
        if get(g:, 'skip_next_coc_float', 0)
            let g:skip_next_coc_float = 0
            return
        endif
        if !get(g:, 'coc_service_initialized', 0) || !CocAction('hasProvider', 'hover') || CocAction('getHover') == []
            return
        endif
        call CocActionAsync('doHover')
    endfunction

    function! ShowSignature()
        if get(g:, 'skip_next_coc_float', 0)
            let g:skip_next_coc_float = 0
            return
        endif
        if !get(g:, 'coc_service_initialized', 0) || !CocAction('hasProvider', 'signature')
            return
        endif
        call CocActionAsync('showSignatureHelp')
    endfunction

    augroup coc_hover
        autocmd!
        autocmd CursorHold * call ShowHover()
        autocmd CursorHoldI * call ShowSignature()
    augroup END
 
    xmap <leader>f <Plug>(coc-format-selected)
    nmap <leader>f <Plug>(coc-format-selected)
    nmap <leader>n <Plug>(coc-rename)
    xmap <leader>A <Plug>(coc-codeaction-selected)
    nmap <leader>A <Plug>(coc-codeaction-cursor)
    xmap <leader>M <Plug>(coc-codeaction-selected)
    nmap <leader>M <Plug>(coc-codeaction-cursor)
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gt <Plug>(coc-type-definition)
    nmap <silent> gI <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    nnoremap <silent> <C-L> :noh \| :pclose \| :let g:skip_next_coc_float = 1 \| :call coc#float#close_all()<CR><C-L>
    inoremap <silent> <C-L> <C-\><C-o>:noh \| :pclose \| :let g:skip_next_coc_float = 1 \| :call coc#float#close_all()<CR><C-\><C-o><C-L>

    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['coc.nvim']
hook_add = '''
    function! s:vista_auto_start()
        if argc() == 0 && !exists("s:exists_std_in")
            Vista coc
        endif
    endfunction

    augroup VistaAutoStart
        autocmd!
        autocmd StdinReadPre * let s:exists_std_in = 1
        autocmd VimEnter * call s:vista_auto_start()
    augroup END

    hi VistaIcon ctermfg=198 cterm=bold
    hi link VistaLineNr SpecialKey

    let g:vista_default_executive = "coc"
    let g:vista_enable_markdown_extension = 0
    let g:vista_sidebar_width = 40
    let g:vista#renderer#enable_icon = 1
    let g:vista#renderer#icons = {
      \ 'func': "ùëì",
      \ 'function': "ùëì",
      \ 'functions': "ùëì",
      \ 'var': "ùë•",
      \ 'variable': "ùë•",
      \ 'variables': "ùë•",
      \ 'const': "ùë•",
      \ 'constant': "ùë•",
      \ 'constructor': "ùëì",
      \ 'method': "ùëì",
      \ 'package': "‚Ñô",
      \ 'packages': "‚Ñô",
      \ 'enum': "ùîº",
      \ 'enummember': "ùëö",
      \ 'enumerator': "ùëí",
      \ 'module': "ùïÑ",
      \ 'modules': "ùïÑ",
      \ 'type': "ùïã",
      \ 'typedef': "ùïã",
      \ 'types': "ùïã",
      \ 'field': "ùë•",
      \ 'fields': "ùë•",
      \ 'macro': "‚Ñ≥",
      \ 'macros': "‚Ñ≥",
      \ 'map': "ùìÇ",
      \ 'class': "‚ÑÇ",
      \ 'augroup': "ùî∏",
      \ 'struct': "ùïä",
      \ 'union': "ùïå",
      \ 'member': "ùëö",
      \ 'target': "ùìâ",
      \ 'property': "ùë•",
      \ 'interface': "ùïÄ",
      \ 'namespace': "‚Ñï",
      \ 'subroutine': "ùë†",
      \ 'implementation': "ùêº",
      \ 'typeParameter': "ùë°",
      \ 'default': "+"
    \}
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeWinSize = 30
    let g:NERDTreeShowHidden = 1
    let g:NERDTreeIgnore = ['^\.DS_Store$[[file]]', '\~$']
'''

[[plugins]]
repo = 'dsimidzija/vim-nerdtree-ignore'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = ['nerdtree']
hook_add = '''
    function! s:nerdtree_auto_start()
        if argc() == 0 && !exists("s:exists_std_in")
            let g:nerdtree_tabs_open_on_console_startup = 1
        endif
    endfunction

    augroup NerdtreeAutoStart
        autocmd!
        autocmd StdinReadPre * let s:exists_std_in = 1
        autocmd VimEnter * call s:nerdtree_auto_start()
    augroup END
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'taiansu/nerdtree-ag'
depends = ['nerdtree', 'ag.vim']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']
hook_add = '''
   let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Untracked" : "!",
        \ "Modified"  : "*",
        \ "Dirty"     : "*",
        \ "Staged"    : "+",
        \ "Renamed"   : ">",
        \ "Unmerged"  : "!",
        \ "Deleted"   : "X",
        \ "Clean"     : "-",
        \ 'Ignored'   : '-',
        \ "Unknown"   : "?"
        \ } 

    hi NERDTreeFlags ctermfg=249
    hi NERDTreeGitStatusUntracked ctermfg=206
    hi NERDTreeGitStatusModified ctermfg=208
    hi NERDTreeGitStatusDirty ctermfg=208
    hi NERDTreeGitStatusStaged ctermfg=077
    hi NERDTreeGitStatusRenamed ctermfg=69
    hi NERDTreeGitStatusUnmerged ctermfg=206
    hi NERDTreeGitStatusStaged ctermfg=077
    hi NERDTreeGitStatusDeleted ctermfg=197
    hi NERDTreeGitStatusClean ctermfg=249
    hi NERDTreeGitStatusIgnored ctermfg=249
    hi NERDTreeGitStatusUnknown ctermfg=249
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Leader>r'
on_cmd = 'QuickRun'
hook_source = '''
    let g:quickrun_config = {}
    let g:quickrun_config['html'] = {
        \ 'outputter' : 'browser',
        \ 'command' : 'cat',
    \ }
    let g:quickrun_config['tex'] = {
        \ 'command': 'latexmk',
        \ 'cmdopt': '-pv',
        \ 'outputter': 'error',
        \ 'outputter/error/success': 'null',
        \ 'outputter/error/error': 'buffer',
        \ 'exec': [
            \ '%c %o %a %s'
        \ ]
    \ }
    let l:pandoc_opt =
        \ '--from=markdown_strict' .
        \ '+tex_math_dollars' .
        \ '+tex_math_double_backslash' .
        \ '+fenced_code_blocks' .
        \ '+backtick_code_blocks' .
        \ '+definition_lists' .
        \ '+pipe_tables' .
        \ '+markdown_in_html_blocks' .
        \ '+footnotes' .
        \ '+implicit_figures' .
        \ '+inline_notes' .
        \ '+header_attributes' .
        \ '+fenced_code_attributes' .
        \ '+inline_code_attributes' .
        \ '+link_attributes' .
        \ '+fenced_divs' .
        \ '+bracketed_spans' .
        \ ' --to=html5' .
        \ ' --template="$HOME/.pandoc/template.html"' .
        \ ' --mathjax="$HOME/.pandoc/dynload.js"' .
        \ ' --css="$HOME/.pandoc/style.css"' .
        \ ' --include-in-header="$HOME/.pandoc/mathjax_config.html"' .
        \ ' --self-contained' .
        \ ' --standalone' .
        \ ' --variable=pagetitle:%{expand("%:t")}'
    let l:pandoc_pre_exec = '%c %o -t json %a %s | '
    let l:pandoc_post_exec = '%c %o -f json %a'
    let l:pandoc_filter = ''

    let l:pandoc_ditaa_filter_cmd = 'pandoc-ditaa-filter'
    let l:pandoc_ditaa_filter_opts = '--ditaa-opts="-E -S --svg" --img-ext="svg"'
    if executable(l:pandoc_ditaa_filter_cmd)
        let l:pandoc_filter = l:pandoc_filter . l:pandoc_ditaa_filter_cmd . ' ' . l:pandoc_ditaa_filter_opts . ' | '
    endif

    if executable('mermaid-filter')
        let l:pandoc_filter = l:pandoc_filter . 'mermaid-filter | '
    endif

    let l:pandoc_exec = l:pandoc_pre_exec . l:pandoc_filter . l:pandoc_post_exec
    let g:quickrun_config['markdown'] = {
        \ 'type': 'pandoc',
        \ 'outputter': 'error',
        \ 'outputter/error/success': 'browser',
        \ 'outputter/error/error': 'buffer',
        \ 'cmdopt': l:pandoc_opt,
        \ 'exec': [
            \ l:pandoc_exec
        \ ]
    \ }

    nmap <leader>r <Plug>(quickrun)
'''

# Ë®ÄË™ûÂà•„Éó„É©„Ç∞„Ç§„É≥

[[plugins]]
repo = 'KeitaNakamura/tex-conceal.vim'
on_path = ['.*\.md', '.*\.tex']
hook_source = '''
    hi clear Conceal
    set conceallevel=2
    let g:tex_conceal="abdgm"
'''

[[plugins]]
repo = 'taqenoqo/vim-markdown'
rev = 'tex-math-dollars'
on_ft = 'markdown'
hook_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'zsh')
    call add(g:markdown_fenced_languages, 'c')
    call add(g:markdown_fenced_languages, 'ruby')
    call add(g:markdown_fenced_languages, 'vim')
    call add(g:markdown_fenced_languages, 'java')
    call add(g:markdown_fenced_languages, 'haskell')
    call add(g:markdown_fenced_languages, 'ocaml')
    call add(g:markdown_fenced_languages, 'javascript')
    call add(g:markdown_fenced_languages, 'r')
    call add(g:markdown_fenced_languages, 'sh')
    call add(g:markdown_fenced_languages, 'conf')
    call add(g:markdown_fenced_languages, 'pfmain')
    call add(g:markdown_fenced_languages, 'perl')
    call add(g:markdown_fenced_languages, 'xml')
    hi link markdownCodeDelimiter Delimiter
    hi link markdownListMarker Identifier
    let g:markdown_fenced_tex = 1
'''

[[plugins]]
repo = 'vim-scripts/vim-stylus'
on_path = '.*\.styl'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'stylus')
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Quramy/tsuquyomi'
depends = 'Shougo/vimproc.vim'
on_ft = 'typescript'
hook_source = '''
    augroup typescript
        autocmd FileType typescript nmap <buffer> <Leader><Return> : <C-u>echo tsuquyomi#hint()<CR>
        autocmd FileType typescript nmap <buffer> <Leader>c <Plug>(TsuquyomiRenameSymbolC)
    augroup END
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_path = '.*\.ts'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'typescript')
'''

[[plugins]]
repo = "OmniSharp/omnisharp-vim"
on_ft = ["cs"]
build = "xbuild server/OmniSharp.sln"
hook_source = '''
    let g:OmniSharp_server_use_mono = 1
    let g:OmniSharp_popup_mappings = {
        \ 'close': ['<Esc>', 'gq'],
        \ 'lineDown': '<C-j>',
        \ 'lineUp': '<C-k>'
        \}
    let g:ale_linters = { 'cs': ['OmniSharp'] }

    nnoremap <silent> <Leader>t :OmniSharpDocumentation<CR>
    nnoremap <silent> <Leader>u :OmniSharpFindUsage<CR>
    nnoremap <silent> <Leader>d :OmniSharpPreviewDefinition<CR>
    nnoremap <silent> <Leader>M :OmniSharpGetCodeActions<CR>
    nnoremap <silent> <Leader>n :OmniSharpRename<CR>
    nnoremap <silent> <Leader>R :OmniSharpRestartServer<CR>
'''

[[plugins]]
repo = 'vim-scripts/CoqIDE'
on_ft = 'coq'
hook_source = '''
    nmap <Leader><Enter> :CoqIDEToCursor<CR>
'''

[[plugins]]
repo = 'adimit/prolog.vim'
on_path = '.*\.swi'
hook_add = '''
    augroup Prolog
        autocmd BufNewFile,BufRead *.swi setfiletype prolog
    augroup END
'''

[[plugins]]
repo = 'enomsg/vim-haskellConcealPlus'
on_ft = 'haskell'
hook_source = '''
    let g:hscoptions = "Arh‚à¥"
'''

[[plugins]]
repo = 'toyamarinyon/vim-swift'
on_path = '.*\.swift'
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'swift')
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_path = '.*\.toml'

[[plugins]]
repo = 'taqenoqo/agda-vim'
on_path = '.*\.agda'
on_ft = 'markdown'
hook_add = '''
    let g:agdavim_includeutf8_mapping = v:false
'''
hook_source = '''
    runtime agda-utf8.vim

    function CloseSubWindow()
        let l:agdaWinNr = bufwinnr('__Agda__')
        if l:agdaWinNr != -1
            execute l:agdaWinNr . "close"
        endif
    endfunction

    function SetAgdaKeyMaps()
        nnoremap <buffer> <LocalLeader>l :cclose<CR>:call CloseSubWindow()<CR>:AgdaReload<CR>
        nnoremap <buffer> <LocalLeader>t :cclose<CR>:call CloseSubWindow()<CR>:call AgdaInfer()<CR>
        nnoremap <buffer> <LocalLeader>r :cclose<CR>:call CloseSubWindow()<CR>:call AgdaRefine("False")<CR>
        nnoremap <buffer> <LocalLeader>R :cclose<CR>:call CloseSubWindow()<CR>:call AgdaRefine("True")<CR>
        nnoremap <buffer> <LocalLeader>g :cclose<CR>:call CloseSubWindow()<CR>:call AgdaGive()<CR>
        nnoremap <buffer> <LocalLeader>c :cclose<CR>:call CloseSubWindow()<CR>:call AgdaMakeCase()<CR>
        nnoremap <buffer> <LocalLeader>a :cclose<CR>:call CloseSubWindow()<CR>:call AgdaAuto()<CR>
        nnoremap <buffer> <LocalLeader>e :cclose<CR>:call CloseSubWindow()<CR>:call AgdaContext()<CR>
        nnoremap <buffer> <LocalLeader>n :cclose<CR>:call CloseSubWindow()<CR>:call AgdaNormalize("IgnoreAbstract")<CR>
        nnoremap <buffer> <LocalLeader>N :cclose<CR>:call CloseSubWindow()<CR>:call AgdaNormalize("DefaultCompute")<CR>
        nnoremap <buffer> <LocalLeader>M :cclose<CR>:call CloseSubWindow()<CR>:call AgdaShowModule('')<CR>
        nnoremap <buffer> <LocalLeader>y :cclose<CR>:call CloseSubWindow()<CR>:call AgdaWhyInScope('')<CR>
        nnoremap <buffer> <LocalLeader>h :cclose<CR>:call CloseSubWindow()<CR>:call AgdaHelperFunction()<CR>
        nnoremap <buffer> <LocalLeader>d :cclose<CR>:call CloseSubWindow()<CR>:call AgdaGotoAnnotation()<CR>
        nnoremap <buffer> <LocalLeader>m :cclose<CR>:call CloseSubWindow()<CR>:AgdaMetas<CR>
        nnoremap <buffer> <LocalLeader>sa :AgdaSetRewriteModeAsIs<CR>:cclose<CR>:call CloseSubWindow()<CR>:call AgdaContext()<CR>
        nnoremap <buffer> <LocalLeader>sn :AgdaSetRewriteModeNormal<CR>:cclose<CR>:call CloseSubWindow()<CR>:call AgdaContext()<CR>
        nnoremap <buffer> <LocalLeader>sh :AgdaSetRewriteModeHeadNormal<CR>:cclose<CR>:call CloseSubWindow()<CR>:call AgdaContext()<CR>
    endfunction

    augroup agda
        autocmd!
        autocmd BufReadPost *.agda call SetAgdaKeyMaps()
    augroup END
'''

[[plugins]]
repo = 'udalov/kotlin-vim'
on_path = ['.*\.kt']
on_source = 'vim-markdown'
hook_post_source = '''
    if !exists('g:markdown_fenced_languages')
        let g:markdown_fenced_languages = []
    endif
    call add(g:markdown_fenced_languages, 'kotlin')
'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_path = ['.*\.tf']

